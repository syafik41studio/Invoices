require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PostsController do
  def valid_attributes
    {
      :title => "Test first post",
      :description => "Test for content",
      :status => "Publish"
    }
  end
  before(:each) do
    @provider_role = Role.create(:name => "Provider")
    @contacts_role = Role.create(:name => "Contacts")
    @general_role = Role.create(:name => "General User")

    @user_provider = Factory.create(:user, {
        :email => "john@example.com",
        :first_name => "John",
        :last_name => "Doe",
        :roles => [@provider_role]
      })

    @user_contacts = Factory.create(:user, {
        :email => "melinda@example.com",
        :first_name => "Melinda",
        :last_name => "Dee",
        :roles => [@contacts_role]
      })

    @user_general = Factory.create(:user, {
        :email => "kim@example.com",
        :first_name => "Kimberly",
        :last_name => "McLeod",
        :roles => [@general_role]
      })

    @post = Post.new(valid_attributes)

    sign_in @user_provider
  end

  describe "GET index" do
    it "assigns all posts as @posts" do
      @post.save
      get :index
      assigns(:posts).should eq([@post])
    end
  end

  describe "GET show" do
    it "assigns the requested post as @post" do
      @post.save
      get :show, :id => @post.id.to_s
      assigns(:post).should eq(@post)
    end
  end

  describe "GET new" do
    it "assigns a new post as @post" do
      get :new
      assigns(:post).should be_a_new(Post)
    end
  end

  describe "GET edit" do
    it "assigns the requested post as @post" do
      @post.save
      get :edit, :id => @post.id.to_s
      assigns(:post).should eq(@post)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Post" do
        expect {
          post :create, :post => valid_attributes
        }.to change(Post, :count).by(1)
      end

      it "assigns a newly created post as @post" do
        post :create, :post => valid_attributes
        assigns(:post).should be_a(Post)
        assigns(:post).should be_persisted
      end

      it "redirects to the created post" do
        post :create, :post => valid_attributes
        response.should redirect_to(mine_posts_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved post as @post" do
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        post :create, :post => {}
        assigns(:post).should be_a_new(Post)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        post :create, :post => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested post" do
        post = Post.create! valid_attributes
        # Assuming there are no other posts in the database, this
        # specifies that the Post created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Post.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => post.id, :post => {'these' => 'params'}
      end

      it "assigns the requested post as @post" do
        post = Post.create! valid_attributes
        put :update, :id => post.id, :post => valid_attributes
        assigns(:post).should eq(post)
      end

      it "redirects to the post" do
        post = Post.create! valid_attributes
        put :update, :id => post.id, :post => valid_attributes
        response.should redirect_to(mine_posts_path)
      end
    end

    describe "with invalid params" do
      it "assigns the post as @post" do
        post = Post.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        put :update, :id => post.id.to_s, :post => {}
        assigns(:post).should eq(post)
      end

      it "re-renders the 'edit' template" do
        post = Post.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        put :update, :id => post.id.to_s, :post => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested post" do
      post = Post.create! valid_attributes
      expect {
        delete :destroy, :id => post.id.to_s
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      post = Post.create! valid_attributes
      delete :destroy, :id => post.id.to_s
      response.should redirect_to(posts_url)
    end
  end

  describe "MINE POST path" do
    it "should show mine post" do
      @post.user_id = @user_provider.id
      @post.save
      get :mine
      assigns(:posts).should eq([@post])
    end
  end

  describe "access posts with role" do
    it "should have no access to new page" do
      sign_in @user_contacts
      get :new
      assigns(:post).should eq(nil)
    end

    it "should have no access to new page with no session" do
      sign_out @user_provider
      get :new
      assigns(:post).should eq(nil)
    end

    it "should have access to posts page with no session" do
      @post.user_id = @user_provider.id
      @post.save
      sign_out @user_provider
      get :index
      assigns(:posts).should eq([@post])
    end
  end

  describe "ajax request like" do
    it "should have 1 like" do
      @post.user_id = @user_provider.id
      @post.save
      get :like, :id => @post.slug
      @post.likes.count.should eq(1)
    end

    it "should have user who liked the post" do
      @post.user_id = @user_provider.id
      @post.save
      get :like, :id => @post.slug
      @post.likes.first.user.should eq(@user_provider)
    end
  end

  describe "create comment for the post" do
    it "should create comment" do
      @post.user_id = @user_provider.id
      @post.save
      comment = Comment.create(
        :user_id => @user_provider.id,
        :commentable_type => @post.class.to_s,
        :commentable_id => @post.id,
        :comment => "Test Comment"
      )
      @post.comments.should eq([comment])
    end

    it "should have 1 comment" do
      @post.user_id = @user_provider.id
      @post.save
      comment = Comment.create(
        :user_id => @user_provider.id,
        :commentable_type => @post.class.to_s,
        :commentable_id => @post.id,
        :comment => "Test Comment"
      )
      @post.comments.count.should eq(1)
    end
  end

end
